#state List[1000](Int[0,1000])*List[1000](Int[0,1000])
#env
#plan List(Int)
#trans Int * X + X + Void
#tprog
trans(s:List(Int),t:List(Int)){
	if(size(s) == 0 && size(t) == 0) collect(3,empty);
	if(size(s) > 0) collect(2,'(tail(s),t));
	if(size(t) > 0) collect(2,'(s,tail(t)));
	if(size(s) > 0 && size(t) > 0)
		if(head(s) == head(t)) collect(1,'(head(s),'(tail(s),tail(t))));
}
#fprog
f0(ch:Int,plan:List(Int)) collect(0,cons(ch,plan));
f1(plan:List(Int)) collect(0,plan);
f2(w:Void) collect(0,nil(1));
#eval
r(plan:List(Int)) size(plan);
#example
([1,2,3],[1,2,3]) -> 3
([1,2,4],[1,3,4]) -> 2
([1,3,4,5],[1,2,3,5]) -> 3
([5,2,3,4,1],[1,2,3,4,5]) -> 3
([1,0,1,2,4,7,3,7,8,9],[2,5,9,7,2,4,3,2,1,5]) -> 3
