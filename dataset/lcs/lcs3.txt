#state List[1000](Int[0,1000])*List[1000](Int[0,1000])
#env
#plan List(Int * Int)
#trans X + (Int * Int) * X + Void
#tprog
trans(s:List(Int),t:List(Int)){
	if(size(s) == 0 && size(t) == 0) collect(3,empty);
	if(size(s) > 0) collect(1,'(tail(s),t));
	if(size(t) > 0) collect(1,'(s,tail(t)));
	if(size(s) > 0 && size(t) > 0)
		collect(2,'('(head(s), head(t)),'(tail(s),tail(t))));
}
#fprog
f0(plan:List(Int * Int)) collect(0, plan);
f1(em:(Int * Int),plan:List(Int * Int))
    collect(0,cons(em, plan));
f2(w:Void) collect(0,nil('(1, 1)));
#eval
r(plan:List(Int * Int))
    let f = \(x: Int * Int, y: Int).(ite(x.1 == x.2 && not(y == -1), y + 1, -1)) in
        fold(f, 0, plan);
#example
([1,2,3],[1,2,3]) -> 3
([1,2,4],[1,3,4]) -> 2
([1,3,4,5],[1,2,3,5]) -> 3
([5,2,3,4,1],[1,2,3,4,5]) -> 3
([1,0,1,2,4,7,3,7],[2,5,9,7,2,4,3]) -> 3
