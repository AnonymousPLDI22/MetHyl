#state List[4](List[4](Int[1,3]))
#env f1: Int[0, 2] f2:Int[0, 2]
#plan List(Int*Int)
#trans (Int * Int) * X + Void
#tprog
trans(mat:List(List(Int)))
    if (size(mat) == 0) collect(2, empty);
    else
        let la = head(rev(mat)) in
            let rem = rev(tail(rev(mat))) in
                foreach j in 0..size(head(mat))+-1,
                    collect(1, '('(j, access(la, j)), rem));
#fprog
f0(w: Int * Int, plan: List(Int*Int)) collect(0, cons(w, plan));
f1(w: Void) collect(0, nil('(0, 0)));
#eval
r(plan:List(Int*Int))
    let f = \(x: Int * Int, y: Int * Int).('(x.1, ite(y.1==x.1, (y.2-f1)*x.2, (y.2-f2)*x.2))) in
        let res = fold(f, '(-1, 3), plan) in
            res.2;
#example
[[2]] 2 2 -> 2
[[1, 2], [3, 1]] 0 0 -> 18
[[1, 2], [3, 1]] 0 2 -> 3