#state List[0](Int[0, 1000]) * List[1000](List[1000](Int[0,1000]))
#env
#plan List(Int*Int)
#trans (Int * Int) * X + Void
#tprog
trans(path: List(Int), mat:List(List(Int)))
    if (size(mat) == 0) collect(2, empty);
    else let h = head(mat) in let rem = tail(mat) in
        if (size(path) == 0)
            foreach i in 0..size(h)+-1, collect(1, '('(i, access(h, i)), '(cons(i, nil(0)), rem)));
        else let la = head(path) in
            foreach i in max(0, la - 1)..min(la+1,size(h)+-1), collect(1, '('(i, access(h, i)), '(cons(i, path), rem)));
#fprog
f0(w: Int * Int, plan: List(Int * Int)) collect(0, cons(w, plan));
f1(w:Void) collect(0, nil('(0, 0)));
#eval
r(plan:List(Int*Int))
    let getw = \(x: Int * Int). (x.2) in
        -sum(map(getw, plan));
#example
([]@Int, [[1]]) -> -1
([]@Int, [[1,2],[3,4]]) -> -4
([]@Int, [[1,2,3],[3,1,2],[2,3,1]]) -> -3
([]@Int, [[1,3,5],[7,4,1],[1,3,5]]) -> -6
([]@Int, [[2,3,2,3],[2,3,3,2],[3,2,3,3],[3,2,3,0]]) -> -7
