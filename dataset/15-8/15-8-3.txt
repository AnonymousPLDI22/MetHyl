#state List[4](List[4](Int[0,5]))
#env
#plan List(Int*Int)
#trans (Int * Int) * X + (Int * Int)
#tprog
trans(mat:List(List(Int)))
    if (size(mat) == 1)
        let last = head(mat) in
            foreach i in 0..size(last)+-1, collect(2, '(i, access(last, i)));
    else
        let cur = head(mat) in
            let rem = tail(mat) in
                foreach i in 0..size(cur)+-1, collect(1, '('(i, access(cur, i)), rem));
#fprog
f0(w: Int * Int, plan: List(Int * Int)) collect(0, cons(w, plan));
f1(a: Int, b: Int) collect(0, cons('(a, b), nil('(0, 0))));
#eval
r(plan:List(Int*Int))
    let getp = \(xx: Int * Int). (xx.1) in
        let tr = map(getp, plan) in
            let trace = zip(tr, tail(tr)) in
                let valid = \(z: Int * Int). (z.2 - 1 <= z.1 && z.1 <= z.2 + 1) in
                    let f = \(x: Int * Int, y: Int). (ite(y == 1 && valid(x), 1, 0)) in
                        let getw = \(xxx: Int * Int). (xxx.2) in
                            ite(fold(f, 1, trace) == 1, -sum(map(getw, plan)), -30);
#example
[[1]] -> -1
[[1,2],[3,4]] -> -4
[[1,2,3],[3,1,2],[2,3,1]] -> -3
[[1,3,5],[7,4,1],[1,3,5]] -> -6
[[2,3,2,3],[2,3,3,2],[3,2,3,3],[3,2,3,0]] -> -7
