#state List[1000](Int[0,1000])
#env
#plan List(Int)
#trans Int * X + X + Int + Void
#tprog
trans(s:List(Int))
        let l=size(s) in {
                if(l==0) collect(4,empty);
                if(l==1) collect(3,head(s));
		if(l>1){
			collect(2,tail(s));
			collect(2,rev(tail(rev(s))));
			if(head(s)==head(rev(s))) collect(1,'(head(s),tail(rev(tail(rev(s))))));
		}
        }

#fprog
f0(ch:Int,plan:List(Int)) collect(0,cons(ch,rev(cons(ch,rev(plan)))));
f1(plan:List(Int)) collect(0,plan);
f2(ch:Int) collect(0,cons(ch,nil(1)));
f3(w:Void) collect(0,nil(1));
#eval
r(plan:List(Int)) size(plan);
#example
[1] -> 1
[1,1] -> 2
[1,2,1] -> 3
[1,2,3,1,2] -> 3
[1,2,2,1,1,2] -> 4
[3,3,1,2,3,4,2,1,4,4] -> 5
