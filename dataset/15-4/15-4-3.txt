#state List[10](Int[0,5])
#env wid: Int[5, 10]
#plan List(Int * Int)
#trans (Int * Int) * X + Void
#tprog
trans(x:List(Int))
    if (size(x) == 0) collect(2, empty);
    else
        foreach i in 1..size(x), collect(1, '('(sum(take(x, i)), i - 1), drop(x, i)));

#fprog
f0(s: Int * Int, plan: List(Int*Int)) collect(0, cons(s, plan));
f1(s: Void) collect(0, nil('(0,0)));
#eval
r(plan:List(Int*Int))
    if (size(plan) == 0) 0; else
    let f = \(x: Int * Int, y: Int). (ite(y > 10000 || x.1 + x.2 > wid, 10001, y + pow(wid - x.1 - x.2, 3))) in
        let rem = rev(tail(rev(plan))) in
            let last = head(rev(plan)) in
                -ite(last.1 + last.2 > wid, 10001, fold(f, 0, rem));

#example
[1, 2, 1] 4 -> 0
[1, 2, 1] 3 -> -9
[1, 4, 1] 4 -> -27
