#state List[5](Int[0, 3]) * List[0](Int[0, 3] * Int[0, 3])
#env fs_cost: List[16](Int[0, 3]) n: Int[1, 3] m: Int[0, 3] c:Int[0, 1]
#plan List(Int * Int)
#trans ((Int * Int) * X) + Void
#tprog
trans(p_list: List(Int), pre: List(Int * Int))
    if (size(p_list) == 0) collect(2, empty);
    else let la = head(p_list) in
        let rem = tail(p_list) in
            let getrem = \(x: Int * Int). (x.1 - x.2) in
                let num = sum(map(getrem, pre)) in
                    foreach i in 0..n,
                        if (la <= (i + num)) collect(1, '('(i, i + num - la), '(rem, cons('(i, la), pre))));

#fprog
f0(w:Int*Int, p: List(Int*Int)) collect(0, cons(w, p));
f1(w:Void) collect(0, nil('(0, 0)));
#eval
r(plan: List(Int*Int))
    let g = \(x:Int*Int, y:Int).(y+access(fs_cost, x.2)+ite(x.1>m, c*(x.1-m), 0)) in
        let res = fold(g, 0, plan) in {
            -res;
        }
#example
([1,1,1], []@(Int * Int)) [1,0,0,0,0,0,0,0] 3 1 1 -> -1
([1,1,1], []@(Int * Int)) [0,0,0,0,0,0,0,0] 3 1 1 -> 0
([1,2,1], []@(Int * Int)) [0,0,0,0,0,0,0,0] 3 1 1 -> -1
([1,2,1], []@(Int * Int)) [1,1,0,1,1,0,1,1] 3 1 1 -> -3
