#state List[5](Int[0, 3])
#env fs_cost: List[16](Int[0, 3]) n: Int[1, 3] m: Int[0, 3] c:Int[0, 1]
#plan List(Int * Int)
#trans ((Int * Int) * X) + Void
#tprog
trans(p_list: List(Int))
    if (size(p_list) == 0) collect(2, empty);
    else let la = head(rev(p_list)) in
        let rem = rev(tail(rev(p_list))) in
            foreach i in 0..n,
                collect(1, '('(i, la), rem));

#fprog
f0(w:Int*Int, p: List(Int*Int)) collect(0, cons(w, p));
f1(w:Void) collect(0, nil('(0, 0)));
#eval
r(plan: List(Int*Int))
    let g = \(x:Int*Int, y:Int*Int).(
        '(y.1 + x.1 - x.2, ite(((y.1+x.1)<x.2)||(y.2==61), 61, y.2+access(fs_cost, y.1 + x.1 - x.2)+ite(x.1>m, c*(x.1-m), 0)))
    ) in
        let res = fold(g, '(0, 0), plan) in {
            -res.2;
        }
#example
[1,1,1] [1,0,0,0,0,0,0,0] 3 1 1 -> -1
[1,1,1] [0,0,0,0,0,0,0,0] 3 1 1 -> 0
[1,2,1] [0,0,0,0,0,0,0,0] 3 1 1 -> -1
[1,2,1] [1,1,0,1,1,0,1,1] 3 1 1 -> -3
