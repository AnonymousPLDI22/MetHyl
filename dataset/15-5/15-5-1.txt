#state List[6](Int[1,3]) * List[6](Int[1, 3])
#env fs_cost: List[6](Int[1, 3])
#plan List(Int)
#trans Int * X + Void
#tprog
trans(x:List(Int), y: List(Int)) {
    if (size(x) == 0 && size(y) == 0) collect(2, empty);
    if (size(x) > 0 && size(y) > 0) {
        if (head(x) == head(y)) collect(1, '(0, '(tail(x), tail(y))));
        collect(1, '(1, '(tail(x), tail(y))));
    }
    if (size(x) > 0) {
        collect(1, '(2, '(tail(x), y)));
    }
    if (size(y) > 0) {
        collect(1, '(3, '(x, tail(y))));
    }
    if (size(x) > 1 && size(y) > 1) {
        let a = head(x) in
            let aa = head(tail(x)) in
                let b = head(y) in
                    let bb = head(tail(y)) in
                        if (a == bb && b == aa) collect(1, '(4, '(drop(x, 2), drop(y, 2))));
    }
    if (size(x) > 0 && size(y) == 0) collect(1, '(5, '(nil(0), nil(0))));
}

#fprog
f0(s: Int, plan: List(Int)) collect(0, cons(s, plan));
f1(s: Void) collect(0, nil(0));
#eval
r(plan: List(Int))
    let f = \(x: Int). (access(fs_cost, x)) in
        -sum(map(f, plan));

#example
([0, 1], [1, 0]) [1,1,1,1,1,1] -> -1
([0, 1], [0, 0, 1]) [1,1,1,1,1,1] -> -3
([0, 1], [0, 1, 0]) [1,1,1,1,1,1] -> -2
