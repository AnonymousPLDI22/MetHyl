#state List[6](Int[0,1000])
#env
#plan BTree(Void,Int)
#trans X * X + Int
#tprog
trans(x:List(Int))
	let m=size(x) in
		if(m==1) collect(2,head(x));
		else
			foreach p in 1..m+(-1),{
                                let y=take(x,p) in
                                let z=drop(x,p) in
					collect(1,'(y,z));
                        }
#fprog
f0(p1:BTree(Void,Int),p2:BTree(Void,Int)) collect(0,bnode(empty,p1,p2));
f1(w:Int) collect(0,bleaf(empty,w));
#eval
r(plan:BTree(Void,Int))
	let getsum=\(x:Void,y:Int*Int,z:Int*Int).('(y.1 + y.2 + z.1 + z.2, y.2 + z.2)) in
		let init=\(x:Int).('(0, x)) in
		    let res = bfold(plan,getsum,init) in
			    -res.1;
#example
[1,2,3] -> -9
[1,3,2] -> -10
[13,7,8,16,21,4,18] -> -239
[1,0,1,2,4,7,3,7,8,9] -> -124
