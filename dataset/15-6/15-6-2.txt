#state BTree[10](Int[1, 1000], Int[1, 1000])
#env
#plan BTree(Int * Int, Int * Int)
#trans Int + (Int * X * X)
#tprog
trans(tree: BTree(Int, Int))
    if (isleaf(tree) == 1) collect(1, bc(tree));
    else let w = bc(tree) in
        let ltree = bl(tree) in
            let rtree = br(tree) in
                collect(2, '(w, ltree, rtree));
#fprog
f0(w: Int) {
    collect(0, bleaf('(0, 0), '(0, w))); collect(0, bleaf('(0, 0), '(1, w)));
}
f1(w: Int, p1: BTree(Int * Int, Int * Int), p2: BTree(Int * Int, Int * Int)) {
    let r1 = bc(p1) in let r2 = bc(p2) in
        if (r1.1 == 0 && r2.1 == 0) collect(0, bnode('(1, w), p1, p2));
    collect(0, bnode('(0, w), p1, p2));
}
#eval
r(plan: BTree(Int * Int, Int * Int))
    let getsum = \(x:Int * Int, y:Int, z:Int). (x.1 * x.2 + y + z) in
        let init = \(x:Int * Int).(x.1 * x.2) in
            bfold(plan, getsum, init);
#example
{10, {4}@Int, {4}@Int} -> 10
